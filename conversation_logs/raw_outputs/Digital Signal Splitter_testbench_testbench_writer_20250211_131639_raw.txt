Timestamp: 2025-02-11 13:16:39
Sender: testbench_writer
Topic: Digital Signal Splitter
Phase: testbench
--------------------------------------------------------------------------------
<think>
Okay, I need to create a Verilog testbench for this module that splits a digital signal into multiple output channels based on control signals. Let me break down what's required.

First, the module has an input_data which is 1 bit. It also has channel_select as 2 bits, and a rst_n which is active low reset. The outputs are ch0 to ch3, each 1 bit. The functionality is that based on channel_select, input_data is routed to one of four channels. If all select bits are 0, no channel gets the data.

The testbench needs to cover all possible input combinations and include clock generation. Also, it should have success/failure messages.

I'll start by setting up the testbench structure. I'll need a clk signal that toggles every cycle. The rst_n is active low, so I'll initialize it as 0 (reset) for some cycles then release it.

The test cases should cover all four possible channel selections: 00, 01, 10, 11. Also, I need to test the case where channel_select is 00 to ensure no outputs are active.

I'll use a step-by-step approach in the testbench. After reset, I'll apply each channel selection and check if only the corresponding output is 1 and others are 0.

I should also include delays between steps to allow signals to settle. Each test case will have input_data toggled to see how it's routed.

Finally, I'll add messages indicating success or failure for each test case. If any test fails, the simulation should stop with an error message.

Now, putting this all together in Verilog code.
</think>

```verilog
`timescale 1ns / 1ps

module tb_channel_splitter;
    // Clock generation
    localparam CLOCK_PERIOD = 10 ns;
    
    wire clk;
    reg rst_n, input_data;
    reg [1:0] channel_select;
    wire ch0, ch1, ch2, ch3;
    
    // DUT instance
    channel_splitter dut (
        .clk(clk),
        .rst_n(rst_n),
        .input_data(input_data),
        .channel_select(channel_select),
        .ch0(ch0),
        .ch1(ch1),
        .ch2(ch2),
        .ch3(ch3)
    );
    
    // Clock generation
    always begin
        #5ns;
        clk = 1;
        #5ns;
        clk = 0;
    end
    
    initial begin
        rst_n = 0;
        input_data = 0;
        channel_select = 0;
        
        // Reset phase
        repeat(2) @(posedge clk);
        rst_n = 1;
        
        // Test cases
        `TEST_CASE("Test case: Channel selection 00 (no output)")
            input_data = 0;
            channel_select = 0;
            #10ns;
            if ({ch3, ch2, ch1, ch0} != 4'b0000) `FAIL("Outputs are not all 0 for channel select 00");
        
        `TEST_CASE("Test case: Channel selection 01")
            input_data = 1;
            channel_select = 1;
            #10ns;
            if (ch1 != 1 || {ch3, ch2, ch0} != 3'b000) `FAIL("Outputs not correct for channel select 01");
        
        `TEST_CASE("Test case: Channel selection 10")
            input_data = 1;
            channel_select = 2;
            #10ns;
            if (ch2 != 1 || {ch3, ch1, ch0} != 3'b000) `FAIL("Outputs not correct for channel select 10");
        
        `TEST_CASE("Test case: Channel selection 11")
            input_data = 1;
            channel_select = 3;
            #10ns;
            if (ch3 != 1 || {ch2, ch1, ch0} != 3'b000) `FAIL("Outputs not correct for channel select 11");
        
        // Additional test cases with toggling input_data
        `TEST_CASE("Test case: Channel selection 01 with toggling input")
            input_data = !input_data;
            repeat(2) @(posedge clk);
            if ({ch3, ch2, ch1, ch0} != 4'b0000) `FAIL("Outputs not correct after toggle");
        
        // Final check
        `SUCCESS("All test cases passed");
    end
    
endmodule
```