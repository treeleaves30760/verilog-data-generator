Timestamp: 2025-02-11 12:55:07
Sender: testbench_writer
Topic: Digital Signal Processor
Phase: testbench
--------------------------------------------------------------------------------
<think>
Okay, so I need to create a comprehensive testbench for a 4-bit full-adder in Verilog. Let me think about how to approach this.

First, I remember that a full-adder has three inputs: A, B, and C_in, and three outputs: S (sum), C_out (carry out). The function of the full-adder is to compute the sum of two bits plus the carry-in, producing the sum bit and the new carry-out.

Now, for a 4-bit adder, I guess it's just four stages of full-adders connected together. Each stage will handle one bit of the binary numbers being added, starting from the least significant bit (LSB) to the most significant bit (MSB). So, I'll need to simulate adding two 4-bit numbers and check if the result matches what's expected.

I should start by setting up the clock signal because digital circuits rely on clocks for timing. Then, I'll need to apply different combinations of inputs to A and B, along with a C_in (which can be either 0 or 1). For each combination, I'll wait for one clock cycle before checking the outputs.

I also need to make sure that after each test case, there's a small delay to allow the circuit to settle before moving on to the next test. Maybe using a `#10` delay after changing inputs and after checking outputs would work.

Finally, I should compile all this into a Verilog module, making sure to include all necessary signals and messages as specified.
</think>

```verilog
module testbench;
    // Clock generation
    always begin
        clock = 0;
        #5;
        clock = 1;
        #5;
    end

    // Test cases for full_adder_4bit
    initial begin
        // Reset inputs
        A = 0;
        B = 0;
        C_in = 0;
        #20;  // Wait for two clock cycles
        
        // Test case 1: A=0 (0000), B=0 (0000), C_in=0
        A = 0;
        B = 0;
        C_in = 0;
        #10;
        if (S == 0 & C_out == 0) $display("Test 1: Success"); else $display("Test 1: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 2: A=1 (0001), B=0 (0000), C_in=0
        A = 1;
        B = 0;
        C_in = 0;
        #10;
        if (S == 1 & C_out == 0) $display("Test 2: Success"); else $display("Test 2: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 3: A=0 (0000), B=1 (0001), C_in=0
        A = 0;
        B = 1;
        C_in = 0;
        #10;
        if (S == 1 & C_out == 0) $display("Test 3: Success"); else $display("Test 3: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 4: A=1 (0001), B=1 (0001), C_in=0
        A = 1;
        B = 1;
        C_in = 0;
        #10;
        if (S == 0 & C_out == 1) $display("Test 4: Success"); else $display("Test 4: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 5: A=2 (0010), B=3 (0011), C_in=0
        A = 2;
        B = 3;
        C_in = 0;
        #10;
        if (S == 1 & C_out == 1) $display("Test 5: Success"); else $display("Test 5: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 6: A=4 (0100), B=5 (0101), C_in=1
        A = 4;
        B = 5;
        C_in = 1;
        #10;
        if (S == 0 & C_out == 1) $display("Test 6: Success"); else $display("Test 6: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 7: A=7 (0111), B=8 (1000), C_in=0
        A = 7;
        B = 8;
        C_in = 0;
        #10;
        if (S == 15 & C_out == 1) $display("Test 7: Success"); else $display("Test 7: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 8: A=15 (1111), B=0 (0000), C_in=1
        A = 15;
        B = 0;
        C_in = 1;
        #10;
        if (S == 14 & C_out == 1) $display("Test 8: Success"); else $display("Test 8: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 9: A=9 (1001), B=6 (0110), C_in=0
        A = 9;
        B = 6;
        C_in = 0;
        #10;
        if (S == 15 & C_out == 0) $display("Test 9: Success"); else $display("Test 9: Failed - S=%d, C_out=%d", S, C_out);
        
        // Test case 10: A=3 (0011), B=4 (0100), C_in=1
        A = 3;
        B = 4;
        C_in = 1;
        #10;
        if (S == 7 & C_out == 1) $display("Test 10: Success"); else $display("Test 10: Failed - S=%d, C_out=%d", S, C_out);
        
        // Final reset
        A = 0;
        B = 0;
        C_in = 0;
        #10;
    end

    // Input signals
    output reg clock;
    input wire [3:0] A;
    input wire [3:0] B;
    input wire C_in;
    
    // Output signals
    output wire [3:0] S;
    output wire C_out;
endmodule
```

This testbench module includes a clock generator and several test cases for different combinations of inputs to the 4-bit full adder. Each test case sets specific values for A, B, and C_in, waits for one clock cycle, and then checks if the sum (S) and carry-out (C_out) match the expected results.

The module uses `reg` for the clock signal because it's generated by an always block, while the inputs are wires connected to the DUT. The outputs are also wires as they come directly from the DUT.

Each test case is followed by a small delay (`#10`) to ensure that there's enough time for the signals to propagate through the circuit before checking the results. After all test cases are run, the inputs are reset to 0s to conclude the testing.