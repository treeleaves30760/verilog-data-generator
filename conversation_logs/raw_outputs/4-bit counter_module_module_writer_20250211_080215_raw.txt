Timestamp: 2025-02-11 08:02:15
Sender: module_writer
Topic: 4-bit counter
Phase: module
--------------------------------------------------------------------------------
<think>
Okay, I need to create a Verilog module for an 8-bit counter with reset and clock enable. Let me think about how to approach this.

First, the module should be named `counter_8bit`. It has three inputs: `clk` (clock), `rst` (reset), and `en` (enable). The output is `count`, an 8-bit binary number.

I remember that flip-flops are used for storing state. Since it's an 8-bit counter, I'll need eight D-type flip-flops, each representing a bit from the least significant to the most significant.

Each flip-flop should capture the input on the rising edge of the clock if the enable signal is high. So, for each bit `count_i`, the equation would be:

`count_i = rst ? 0 : (en ? ~count_i : count_i);`

Wait, no, that's not right. Because if en is high, we want to toggle the bit on each clock edge.

I think using a simple conditional assignment is the way to go. Each bit can be assigned based on these conditions. For example, for each `count_i`, it would be:

`count_i = rst ? 0 : (en ? ~count_i : count_i);`

But this might not work as intended because toggling each bit individually could lead to issues with the overall counter.

Maybe a better approach is to use an always block that handles all bits together. So inside the always block triggered by posedge of clk and rst, I'll check if rst is high. If so, set all count bits to 0. Otherwise, if en is high, increment the count on each clock edge.

Wait, but in Verilog, using non-blocking assignments (`<=`) inside a `posedge` clocked always block is correct. But I need to structure it properly.

So putting it all together:

- The module has three inputs: clk, rst, en.
- Output is count, an 8-bit wire.

Inside the module:
- Use an always block that's triggered by posedge of clk and also sensitive to rst (since rst can change at any time).
- In the block, if rst is high, set count to 0.
- Else, if en is high, increment count by 1.

I think this approach is efficient and uses synthesizable constructs. It avoids using multiple flip-flops and instead handles the entire counter with a single always block, which is more concise and easier to read.
</think>

```verilog
module counter_8bit (
    input wire clk,
    input wire rst,
    input wire en,
    output reg [7:0] count
);

always @(posedge clk or rst) begin
    if (rst) begin
        count <= 0;
    end else if (en) begin
        count <= count + 1;
    end
end

endmodule
```