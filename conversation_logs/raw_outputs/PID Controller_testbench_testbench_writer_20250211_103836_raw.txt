Timestamp: 2025-02-11 10:38:36
Sender: testbench_writer
Topic: PID Controller
Phase: testbench
--------------------------------------------------------------------------------
<think>
Okay, so I need to create a testbench for a 2-bit full-adder in Verilog. Hmm, where do I start? Well, first, I remember that a full-adder takes three inputs: A, B, and C_in, and produces two outputs: S (sum) and C_out (carry out). Since it's a 2-bit adder, each input can be either 0 or 1.

I think the testbench should generate all possible input combinations. For two bits, there are 2^3 = 8 possible cases because there are three inputs. So I'll need to loop through all these cases to ensure every scenario is tested.

Next, I need to include clock generation. In Verilog, I can create a clock signal that toggles every certain period. Maybe using an initial block with a forever loop that alternates the clock every 10 units.

I should also reset the inputs at the beginning. So, setting A, B, and C_in to 0, then applying the reset for a few clock periods to make sure the circuit is in a known state before testing begins.

For each test case, I'll need to wait until the end of the clock cycle (when the clock goes high again) before changing inputs. This ensures that the circuit has enough time to process the previous inputs before moving on to the next set.

After applying each input combination, I'll calculate what the expected sum and carry should be. Then, I'll check if the actual outputs from the full-adder match these expectations. If they do, I'll display a success message; otherwise, an error message indicating which case failed.

I should also handle the end of the testbench by stopping after all cases are tested or if any failure occurs. Using $finish will halt the simulation once done.

Wait, how do I calculate the expected sum and carry? Oh right, for each combination of A, B, and C_in, the sum is (A XOR B XOR C_in) and the carry out is ((A AND B) OR (C_in AND (A XOR B))). Or maybe it's easier to manually compute each case since there are only 8 possibilities.

I'll structure the testbench with an initial block containing the clock generation. Then, in another initial block, I'll handle the input stimuli and output checking. Each step will be followed by a #10 delay to allow time for the signals to propagate.

Let me outline the steps:

1. Generate clock signal.
2. Reset all inputs to 0 at t=0.
3. After reset, loop through all 8 possible input combinations.
4. For each combination:
   a. Wait until the end of the current clock cycle (when clock goes high).
   b. Set A, B, C_in to the next binary values.
   c. Calculate expected sum and carry.
   d. Wait again for the next clock cycle to see if outputs match.
5. If any output doesn't match, display an error message and stop.
6. After all tests pass, display a success message.

I need to make sure that each input change happens after the falling edge of the clock (when it goes from 1 to 0) because typically, flip-flops are triggered on the rising edge. But since this is a combinational circuit, maybe the exact timing isn't critical as long as there's enough time for the signals to settle.

Also, I should use non-blocking assignments for inputs so that they change at the beginning of the next time step, allowing proper setup before checking outputs.

Wait, in Verilog, for initial blocks, we can use blocking assignments since it's procedural code. So setting A, B, C_in inside a loop with #10 delays should work.

I think I've got all the parts figured out. Now, putting it all together into the Verilog code.
</think>

```verilog
module testbench;
    // Clock generation
    initial begin
        clock = 0;
        forever begin
            #5 clock = ~clock;
        end
    end

    // Input signals
    reg A, B, C_in;

    // Output signals
    wire S, C_out;

    // DUT instantiation
    full_adder dut(
        .A(A),
        .B(B),
        .C_in(C_in),
        .S(S),
        .C_out(C_out)
    );

    initial begin
        // Reset inputs
        A = 0;
        B = 0;
        C_in = 0;
        #10;

        $display("Testing full adder for all possible input combinations:");
        $display("---------------------------------------------");
        $display("| A | B | C_in | Expected S | Expected C_out | Actual S | Actual C_out |");
        $display("---------------------------------------------");

        // Test all possible input combinations
        for (A = 0; A < 2; A = ~A) {
            for (B = 0; B < 2; B = ~B) {
                for (C_in = 0; C_in < 2; C_in = ~C_in) {
                    #10;
                    // Calculate expected sum and carry
                    reg expected_S, expected_C_out;
                    expected_S = (A ^ B ^ C_in);
                    expected_C_out = ((A & B) | (C_in & (A ^ B)));

                    // Wait for the end of the clock cycle before checking outputs
                    #10;
                    
                    if (S == expected_S && C_out == expected_C_out) {
                        $display("| %b | %b | %b | %b | %b | %b | %b |", A, B, C_in, expected_S, expected_C_out, S, C_out);
                        $display("------------------------------------------------");
                        $display("TEST CASE PASSED");
                        $display("---------------------------------------------");
                    } else {
                        $error("TEST CASE FAILED for inputs A=%b, B=%b, C_in=%b", A, B, C_in);
                        $finish;
                    }
                }
            }
        }

        // All tests passed
        $display("All test cases passed successfully!");
        #10;
        $finish;
    end

endmodule
```