Timestamp: 2025-02-11 08:56:22
Sender: testbench_writer
Topic: DDR3 Memory Controller
Phase: testbench
--------------------------------------------------------------------------------
<think>
Okay, I need to create a testbench for the 8-bit multiplier. The user provided specifications including inputs (a and b) and outputs (product). 

First, I'll set up the clock generation at 10 MHz, which gives a period of 100 ns. Then, I'll handle the reset signal, ensuring it's active for a sufficient time.

Next, I'll test all possible input combinations by iterating through all values of a and b from 0 to 255. For each combination, I'll apply the inputs with a setup time relative to the clock edge.

After applying the inputs, I'll wait for one clock cycle before checking the product output. If any discrepancy is found, I'll display an error message with details and stop the simulation. If all tests pass, I'll show a success message.
</think>

```verilog
`timescale 1ns / 1ps

module multiplier_tb;
    // Clock generation
    localparam CLK_PERIOD = 100;  // 10 MHz clock
    
    // Inputs
    input clk, rst_n;
    input [7:0] a, b;
    
    // Outputs
    output [15:0] product;
    
    // Testbench signals
    reg tb_clk, tb_rst_n;
    reg [7:0] tb_a, tb_b;
    
    // DUT instantiation
    Multiplier dut (
        .clk(tb_clk),
        .rst_n(tb_rst_n),
        .a(tb_a),
        .b(tb_b),
        .product(product)
    );

    // Clock generation
    always begin
        tb_clk = 1;
        # (CLK_PERIOD / 2);
        tb_clk = 0;
        # (CLK_PERIOD / 2);
    end

    // Reset handling
    initial begin
        tb_rst_n = 0;
        repeat(2) { @posedge tb_clk; }
        tb_rst_n = 1;
    end

    // Test cases
    initial begin
        $display("8-bit Multiplier Testbench");
        $display("------------------------");
        
        // Initialize test inputs
        tb_a = 0;
        tb_b = 0;

        // Test all possible input combinations
        for (tb_a from 0 to 255) begin
            for (tb_b from 0 to 255) begin
                // Apply inputs with setup time
                # (CLK_PERIOD * 0.1);
                tb_a = a;
                tb_b = b;
                
                // Wait for one clock cycle
                repeat(2) { @posedge tb_clk; }
                
                // Check output with hold time
                # (CLK_PERIOD * 0.1);
                if (product != (a * b)) begin
                    $display("FAIL: Expected %h, Actual %h", a * b, product);
                    $finish;
                end
            end
        end
        
        // All tests passed
        $display("ALL TESTS PASSED");
        $finish;
    end
endmodule
```