Timestamp: 2025-02-11 08:13:42
Sender: testbench_writer
Topic: UART transmitter
Phase: testbench
--------------------------------------------------------------------------------
<think>
Alright, I need to create a Verilog testbench for the UART Receiver Module based on the provided specifications. Let me think through how to approach this.

First, the module has inputs clk, rst, rx_data, and outputs rx_char, rx_busy, and rx_done. The goal is to thoroughly test all possible input scenarios and verify the correct behavior of the outputs.

I'll start by setting up the clock generation using a continuous loop with #10 for each cycle since the clock period is 20ns (50MHz). 

Next, I need to handle reset properly—rst should be high for a few cycles after simulation starts and then released. This ensures the module initializes correctly.

For testing, I'll generate various test patterns for rx_data. These patterns should cover all possible byte values, including special characters like start and stop bits. Using a variable to cycle through these values will help in exhaustive testing.

I'll use flags to track when the receiver is busy or done. Each time new data is sent, I'll wait for the receiver to process it and check if rx_done is correctly asserted.

It's crucial to handle timing properly—introduce delays where necessary to allow the DUT to respond before checking outputs. Using #1 after certain operations ensures the simulation waits for one clock cycle.

I should also test edge cases, such as sending multiple characters consecutively without waiting for rx_done, or asserting rst during transmission to see if the module resets correctly.

Finally, I'll structure the testbench with initial setup, enter a loop to iterate through test patterns, and use helper functions to wait for completion and check states. After all tests pass, display a success message; if any fail, show an error.
</think>

```verilog
`timescale 1ns / 1ps

module uart_receiver_testbench();
    // Define local parameters
    localparam BAUD_RATE = 16;
    localparam CLK_PERIOD = 10;  // 50MHz clock (20ns period)
    
    // Inputs
    reg clk;
    reg rst;
    reg rx_data;
    
    // Outputs
    wire rx_char;
    wire rx_busy;
    wire rx_done;
    
    // DUT instance
    uart_receiver #(
        .BAUD_RATE(BAUD_RATE)
    ) dut (
        .clk(clk),
        .rst(rst),
        .rx_data(rx_data),
        .rx_char(rx_char),
        .rx_busy(rx_busy),
        .rx_done(rx_done)
    );
    
    // Clock generation
    always begin
        clk = 0; #5;
        clk = 1; #5;
    end
    
    initial begin
        rst = 1;
        rx_data = 0;
        
        // Reset the DUT
        rst = 1;
        repeat(3) { @posedge clk; }
        rst = 0;
        
        // Test all possible input combinations
        for (rx_data = 0; rx_data < 8'hFF; rx_data++) {
            // Generate test patterns with start and stop bits
            reg [7:0] data_byte = rx_data;
            
            // Create a valid UART frame:
            // Start bit (0), Data (data_byte), Parity (even), Stop bit(s) (1 or 2)
            // For simplicity, we'll use one stop bit
            reg [9:0] frame = {1'b0, data_byte, 6'b000000};  // Adjust parity if required
            
            $display("Testing data: %h", data_byte);
            
            // Drive the frame onto rx_data with appropriate timing
            for (bit_pos = 0; bit_pos < 10; bit_pos++) {
                rx_data = frame[9 - bit_pos];  // MSB first
                @posedge clk;
            }
            
            // Wait for receiver to process the data
            wait_for_rx_done();
            
            // Check if received character matches expected
            check_received_char(data_byte, rx_char);
            
            // Ensure busy state is correctly managed
            check_busy_state(!rx_done);
        }
        
        $display("Testbench completed successfully!");
    end
    
    // Helper task to wait for receiver completion
    task wait_for_rx_done();
        while (1) begin
            if (rx_done == 1) break;
            @posedge clk;
        end
    endtask
    
    // Helper function to check received character
    task check_received_char(expected_char, actual_char);
        if (actual_char != expected_char) begin
            $display("Failure: Received character mismatch - Expected: %h, Actual: %h", 
                     expected_char, actual_char);
            $finish;
        end
    endtask
    
    // Helper function to check busy state
    task check_busy_state(expected_value);
        if (rx_busy != expected_value) begin
            $display("Failure: rx_busy mismatch - Expected: %b, Actual: %b", 
                     expected_value, rx_busy);
            $finish;
        end
    endtask
    
endmodule
```