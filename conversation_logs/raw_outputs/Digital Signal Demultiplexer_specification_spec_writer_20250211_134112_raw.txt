Timestamp: 2025-02-11 13:41:12
Sender: spec_writer
Topic: Digital Signal Demultiplexer
Phase: specification
--------------------------------------------------------------------------------
<think>
Okay, so I need to create a Verilog specification for a Digital Signal Demultiplexer. Let me think about what that entails.

First, I should understand what a demultiplexer does. From what I remember, a demultiplexer (or demux) is a circuit that takes a single input and directs it to one of several outputs based on a control signal. It's like the opposite of a multiplexer.

Now, for the Verilog specification, I need to structure it clearly as per the user's instructions. The format includes Module Name, Description, Inputs, Outputs, Functionality, and Timing Requirements.

Starting with the Module Name: It should be something descriptive, maybe "DigitalSignalDemultiplexer." That makes sense because it directly tells what the module does.

Next is the Description. I need to briefly explain what the demux does. So, it takes a single digital input and routes it to one of four outputs based on a two-bit control signal. That covers the basic functionality.

Moving on to Inputs. The main input is the data_in, which would be 1 bit wide. Then there's the control signal, sel, which is 2 bits because it needs to select among four possible outputs (0 to 3). Also, I should include a clock and reset for proper operation. So, inputs are: data_in (1-bit), sel (2-bit), clk (1-bit), and rst (1-bit).

For Outputs, there will be four output signals, each corresponding to one of the selected inputs. Let's name them data_out_0 to data_out_3, each 1 bit wide.

Functionality-wise, I need to describe how the demux works. When the reset is active, all outputs should be 0. Otherwise, based on the sel value, the corresponding data_in is sent to the selected output. For example, if sel is 2'b00, data_out_0 gets data_in, and others are 0.

Timing Requirements: The demux operates on a clock signal with a frequency of 100 MHz. The reset is active high, meaning when rst is 1, it resets all outputs to 0. There's no mention of setup or hold times here, so I can leave that out unless specified otherwise.

Wait, in the previous example response, the user included setup and hold times. Maybe I should include those as well. So, data_in changes must occur at least 5 ns before the clock edge, and they remain stable for 5 ns after. Similarly, sel must be valid 5 ns before the clock edge.

I think that's all. Let me structure this properly without any markdown or code blocks, just plain text as per the instructions.
</think>

1. Module Name: DigitalSignalDemultiplexer  
2. Description: A digital signal demultiplexer that routes a single input to one of four outputs based on a two-bit control signal.  
3. Inputs:  
   - data_in: 1 bit (Input data signal)  
   - sel: 2 bits (Selection control signal, active-high)  
   - clk: 1 bit (System clock)  
   - rst: 1 bit (Active-high reset signal)  
4. Outputs:  
   - data_out_0: 1 bit (Output when sel is 00b)  
   - data_out_1: 1 bit (Output when sel is 01b)  
   - data_out_2: 1 bit (Output when sel is 10b)  
   - data_out_3: 1 bit (Output when sel is 11b)  
5. Functionality:  
   The demultiplexer routes the input data to one of four outputs based on the two-bit selection signal. When rst is high, all outputs are set to 0. On the rising edge of clk, the demultiplexer evaluates the sel signal and forwards data_in to the corresponding output. If sel is not 00b, 01b, 10b, or 11b, no output is selected (default to 0).  
6. Timing Requirements:  
   - Clock: clk (rising edge), frequency = 100 MHz  
   - Reset: rst (active-high), synchronous reset on rising edge of clk  
   - Setup time for data_in and sel: 5 ns before the rising edge of clk  
   - Hold time for data_in and sel: 5 ns after the rising edge of clk