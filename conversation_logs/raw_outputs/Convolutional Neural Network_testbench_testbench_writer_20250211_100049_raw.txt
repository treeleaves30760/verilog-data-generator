Timestamp: 2025-02-11 10:00:49
Sender: testbench_writer
Topic: Convolutional Neural Network
Phase: testbench
--------------------------------------------------------------------------------
<think>
Okay, I need to create a Verilog testbench for the CNN module. The user has already provided some code, but it's incomplete and lacks specific details. Let me think about how to approach this.

First, I should understand what the CNN module does. It likely takes an input image (probably 28x28 grayscale as in MNIST) and outputs a predicted class label. So, the testbench needs to simulate different input images and verify if the output is correct.

The user's code has placeholders for test cases and comments indicating that I need to replace them with actual image bits. That means I need to find or create several 28x28 grayscale images in binary format to use as test inputs.

I should also handle the clock generation properly. The current code sets up a clock at 100 MHz, which is good for simulation purposes. But I need to ensure that all signals are correctly timed with respect to the clock edges.

The reset signal is active high, so it initializes the module to a known state before starting any test case. After resetting, I'll set the input data and start signal appropriately.

I notice that the output_class is 10 bits wide, which suggests that the CNN can classify into 10 different classes (probably digits 0-9). The done signal indicates when the processing is complete, so I should wait for this before checking the output.

One thing missing in the current code is the actual test images. I'll need to replace the placeholder with real image data. Since I don't have access to specific MNIST images, I can either use example images or generate random ones for testing purposes.

Additionally, I should include clear success and failure messages to easily identify if a test case passes or fails. This will help in debugging and verifying the correctness of the CNN module.

I also need to ensure that all input combinations are tested. Since there are 10 possible classes, I'll loop through each class from 0 to 9 and verify that the output matches the expected value for each case.

Finally, I should make sure that the testbench is self-contained and can be run without any external dependencies. This means including all necessary signals and initializing them properly at the start of the simulation.

Overall, my approach will be:
1. Set up the clock and reset signals.
2. Define test cases with actual image data for each digit 0-9.
3. Apply each test case one by one, ensuring proper timing with respect to the clock.
4. Wait for the done signal before checking the output.
5. Display success or failure messages for each test case.
6. Loop through all test cases and terminate after completion.

By following these steps, I can create a comprehensive Verilog testbench that thoroughly tests the CNN module's functionality.
</think>

```verilog
module tb_cnn;

    // Define clock frequency
    localparam CLK_PERIOD = 10 ns;

    // Inputs
    reg clk;
    reg rst;
    reg [783:0] input_data;  // 28x28 grayscale image (784 bits)
    reg start;

    // Outputs
    wire [9:0] output_class;
    wire done;

    // Clock generation
    initial begin
        clk = 0;
        forever begin
            # (CLK_PERIOD / 2);
            clk = ~clk;
        end
    end

    // Reset signal
    initial begin
        rst = 1;
        input_data = 0;
        start = 0;
        # 50 ns;  // Wait for clock cycles to settle
        rst = 0;
    end

    // Test cases
    integer test_case;
    reg [783:0] test_images [];
    initial begin
        test_images = {
            // MNIST digit '0' (example input)
            12'b000000000000_000000000000_...,
            // MNIST digit '1' (example input)
            12'b000000000000_000000000000_...
            // Add more test cases for other digits here
        };

        for (test_case = 0; test_case < 10; test_case++) begin
            # 20 us;  // Wait for previous processing to complete

            // Apply reset
            rst = 1;
            # CLK_PERIOD;
            rst = 0;

            // Set input data and start signal
            input_data = test_images[test_case];
            start = 1;
            # CLK_PERIOD;
            start = 0;

            // Wait for processing to complete
            while (!done) 
                @ (posedge clk);

            // Check output
            if (output_class == test_case + 1) begin
                $display("Test case %d: Success! Predicted class %d.", test_case, output_class);
            end else begin
                $display("Test case %d: Failure! Expected %d, got %d.", test_case, test_case + 1, output_class);
            end

            # 20 us;  // Wait before next test case
        end

        $display("All test cases completed.");
        $finish;
    end

endmodule
```