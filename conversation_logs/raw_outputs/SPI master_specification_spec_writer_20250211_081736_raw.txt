Timestamp: 2025-02-11 08:17:36
Sender: spec_writer
Topic: SPI master
Phase: specification
--------------------------------------------------------------------------------
<think>
Okay, so I need to create a detailed Verilog specification for an SPI master. Hmm, where do I start? Let me think about what an SPI master does. It's responsible for initiating and controlling communication over the SPI bus with various slaves.

First, the module name should probably be something like spi_master. That makes sense. Now, the description: it needs to handle full-duplex communication, support multiple slaves via CS lines, manage clock polarity and phase, and detect slave readiness. Got it.

Looking at the inputs, I need a clock (clk) and reset (rst_n), those are standard. Then there's the SPI configuration: CS width (cs_width), which determines how many slaves we can address. The SCK frequency divisor (sck_freq_div) will control the speed of the clock. Also, whether it's CPOL and CPHA, so two inputs for that.

For the commands, I need a start signal (start), an address to select the slave (cs_addr), and the data to send (tx_data). The number of bytes to transfer (tx_length) is also necessary. Maybe some control signals like enable (enable) and done (done).

On the output side, there's the SCK, CS, and MOSI lines. Each will have their own bus widths: sck_out for clock, cs_out for chip select, and mosi_out for data out.

Functionality-wise, the master should generate the SCK based on the divisor. It needs to manage the selected slave via CS lines. When a transaction is initiated, it should send data and wait for acknowledgment if required. Also, handle multiple slaves by cycling through them with the appropriate timing.

Timing requirements include a clock input at 100MHz, reset as active low, setup times before rising edges on SCK, and hold times after falling edges. The master should be ready within a certain number of clock cycles after reset.

Wait, did I miss anything? Maybe some handshaking signals or acknowledgment from the slave? Oh, right, in the functionality, it mentions detecting when the slave is ready to receive data, so that's covered.

I think that's all. Now, let me structure this properly as per the user's format.
</think>

```  
1. Module Name: spi_master  
2. Description: A full-duplex SPI master controller supporting multiple slaves via chip select (CS) lines, capable of handling various clock polarities and phases.  
3. Inputs:  
   - clk: 1 bit Clock input  
   - rst_n: 1 bit Active-low reset signal  
   - cs_width: 4 bits Number of slave devices supported (up to 16)  
   - sck_freq_div: 8 bits SPI clock frequency divisor  
   - cpol: 1 bit Clock polarity (0 = falling, 1 = rising)  
   - cpha: 1 bit Clock phase (0 = first edge, 1 = second edge)  
   - start: 1 bit Transaction start signal  
   - cs_addr: log2(cs_width)+1 bits Chip select address for the target slave  
   - tx_data: 8 bits Data to be transmitted in a single byte transfer  
   - tx_length: 4 bits Number of bytes to transmit (up to 16)  
   - enable: 1 bit Master enable signal  
   - done: 1 bit Transaction completion indicator  
4. Outputs:  
   - sck_out: cs_width bits SPI clock output for each slave  
   - cs_out: cs_width bits Chip select signals for each slave  
   - mosi_out: 8 bits Master Output, Slave Input (MOSI) data bus  
5. Functionality:  
   The spi_master module generates the SCK signal based on the sck_freq_div value and manages the CS lines to select the appropriate slave device. It supports full-duplex communication, allowing simultaneous transmission and reception of data. The master handles multiple slaves by cycling through their respective CS signals according to the cs_addr input. When a transaction is initiated with the start signal, the master sends the tx_data to the selected slave and waits for acknowledgment if required. The controller ensures proper clock timing based on CPOL and CPHA settings.  
6. Timing Requirements:  
   - Clock (clk): 100 MHz  
   - Reset (rst_n): Active-low reset with a hold time of at least one clock cycle before rising edge  
   - Setup time for SCK: 5 ns before the rising edge  
   - Hold time for SCK: 5 ns after the falling edge  
   - The master should be ready to initiate a new transaction within 10 clock cycles after reset.  
```